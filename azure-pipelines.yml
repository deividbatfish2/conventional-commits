trigger:
  - main
pr:
  - main
  - develop

pool:
  vmImage: 'ubuntu-20.04'

variables:
  - group: vault
  - name: applicationProjectPath
    value: '**/*.Application/*.csproj'
  - name: unitTestProjectPath
    value: '**/*.UnitTest/*.csproj'
  - name: buildConfiguration
    value: 'release'
  - name: isBumpedVersion
    value: True 

jobs:
 - job: Run_Unit_Tests_on_PR_to_develop
   # Run only on PRs to develop since the pull request origin don't be the main branch
   condition: and(eq(variables['Build.Reason'], 'PullRequest'), and(eq(variables['system.pullRequest.targetBranch'], 'develop'), ne(variables['system.pullRequest.sourceBranch'], 'main')))
   steps:
    
    - task: UseDotNet@2
      displayName: Use dotnet core SDK 5
      inputs:
        packageType: sdk
        version: 5.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    - task: DotNetCoreCLI@2
      displayName: Restore Test Project
      inputs:
        command: 'restore'
        projects: '$(unitTestProjectPath)'
    
    - task: DotNetCoreCLI@2
      displayName: Build Test Project
      inputs:
        command: 'build'
        projects: '$(unitTestProjectPath)'
        arguments: --no-restore --configuration $(buildConfiguration)
    
    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: 'test'
        projects: '$(unitTestProjectPath)'
        arguments: --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
        publishTestResults: true

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '**/*/coverage.cobertura.xml'
  
 - job: Build_Application
   # Run only on PRs to develop since the pull request origin don't be the main branch
   condition: and(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['system.pullRequest.targetBranch'], 'main'))
   
   steps:
    - task: PowerShell@2
      displayName: SET Credentials
      inputs:
        targetType: 'inline'
        script: |
          git config credential.helper "store --file=.git/credentials";
          echo "https://$(GIT_HUB_TOKEN):@github.com" > .git/credentials;
    
    - task: PowerShell@2
      condition: ne('$(isBumpedVersion)', 'False')
      displayName: Checkout $(system.pullRequest.sourceBranch)
      inputs:
        targetType: 'inline'
        script: 'git checkout $(system.pullRequest.sourceBranch)'
      
    - task: Bash@3
      displayName: SET PR REASON
      inputs:
        targetType: 'inline'
        script: |
          git log -1 --oneline
          RESULT=$(echo "$(git log -1 --oneline)" | grep -o -E "chore\(release\):\s[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}" && echo "True" || echo "False")
          RESULT=$(echo $RESULT | grep -o -E "True|False")
          echo "result: $RESULT"
          echo "##vso[task.setvariable variable=isBumpedVersion]$RESULT"
          echo "Valor final: $(isBumpedVersion)"
    
    - task: Bash@3
      displayName: Teste
      inputs:
        targetType: 'inline'
        script: |
          echo "Valor final: $(isBumpedVersion)"

    - task: UseDotNet@2
      displayName: Use dotnet core SDK 5
      inputs:
        packageType: sdk
        version: 5.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      condition: eq('$(isBumpedVersion)', 'False')
      displayName: Install versionize
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install --global Versionize'

    - task: PowerShell@2
      condition: eq('$(isBumpedVersion)', 'False')
      displayName: Set Repository
      inputs:
        targetType: 'inline'
        script: 'git remote set-url origin https://github.com/deividbatfish2/conventional-commits.git'

    - task: PowerShell@2
      condition: eq('$(isBumpedVersion)', 'False')
      displayName: Set Commiter
      inputs:
        targetType: 'inline'
        script: 'git config user.name XablauT ; git config user.email hebin80893@ztymm.com'

    - task: PowerShell@2
      condition: eq('$(isBumpedVersion)', 'False')
      displayName: Bumped Version
      inputs:
        targetType: 'inline'
        script: 'versionize'
    
    # - task: DotNetCoreCLI@2
    #   displayName: Restore Test Project
    #   inputs:
    #     command: 'restore'
    #     projects: '$(unitTestProjectPath)'
    
    # - task: DotNetCoreCLI@2
    #   displayName: Build Test Project
    #   inputs:
    #     command: 'build'
    #     projects: '$(unitTestProjectPath)'
    #     arguments: --no-restore --configuration $(buildConfiguration)
    
    # - task: DotNetCoreCLI@2
    #   displayName: Run Unit Tests
    #   inputs:
    #     command: 'test'
    #     projects: '$(unitTestProjectPath)'
    #     arguments: --collect:"XPlat Code Coverage" --DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
    #     publishTestResults: true

    # - task: PublishCodeCoverageResults@1
    #   displayName: 'Publish code coverage report'
    #   inputs:
    #     codeCoverageTool: 'Cobertura'
    #     summaryFileLocation: '**/*/coverage.cobertura.xml'
    
    - task: DotNetCoreCLI@2
      displayName: Restore Application Project
      inputs:
        command: 'restore'
        projects: '$(applicationProjectPath)'
    
    - task: DotNetCoreCLI@2
      displayName: Build Application Project
      inputs:
        command: 'build'
        projects: '$(applicationProjectPath)'
        arguments: --no-restore --configuration $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/GatewayPagamentos.Application
    
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/GatewayPagamentos.Application'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    
    - task: PowerShell@2
      condition: eq('$(isBumpedVersion)', 'False')
      displayName: Update release
      inputs:
        targetType: 'inline'
        script: 'git push --follow-tags origin $(system.pullRequest.sourceBranch)'
      
      